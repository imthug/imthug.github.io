{"version":3,"sources":["component/ConnectionBulb.jsx","component/TypingUsers.jsx","component/InputBox.jsx","component/MessageContainer.jsx","component/AppContainer.jsx","component/AppStore.jsx","App.js","serviceWorker.js","index.js"],"names":["ConnectionBulb","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","appStore","props","react_default","a","createElement","className","connection","React","Component","TypingUsers","users","keys","typingUsers","length","join","InputBox","_this","call","state","inputValue","evt","api","setState","target","updateTyping","sendMessage","TypingUsers_TypingUsers","input","placeholder","style","color","onChange","keyDetect","bind","onPressEnter","submitMessage","MessageContainer","mounted","messages","skeleton","size","active","renderMessageList","prevProp","prevState","scrollHeight","window","scrollTo","list","split","dataSource","renderItem","item","Item","sender","trim","justifyContent","tag","wordBreak","raw","parseSkeleton","AppContainer","Content","Layout","_this$props","ConnectionBulb_ConnectionBulb","MessageContainer_MessageContainer","InputBox_InputBox","STATE","CONNECTED","DISCONNECTED","CONNECTING","AppStore","username","audio","Audio","queryParams","onfocus","onFocus","assertThisInitialized","onlineUsers","messageCountWhenAway","readUrlQueryParams","serverSocket","initializeWebSocket","startAsyncServices","recovering","q","url","location","href","patternResult","exec","queriesList","i","param","undefined","document","title","hasFocus","play","readyState","WebSocket","formWsUrl","onopen","onWebsocketOpen","onclose","onWebsocketClose","onmessage","onWebsocketMessage","onerror","handleError","resolveMessage","data","message","indexOf","updateNewMessage","updateTypingUsers","updateOnlineUsers","_this$state","userName","user","getTime","time","moment","format","_this$state2","push","parseIncommingMessage","updateMessageCountOnBlur","setUsername","parseOutgoingMessage","send","name","getQueryString","hostname","str","substring","Math","round","Date","typingUserService","setInterval","refreshTypingUsers","connectionMonitorService","monitorConnection","changed","_this$state3","msg","renderTitle","AppContainer_AppContainer","getApiHooks","String","prototype","capitalize","charAt","toUpperCase","slice","App","AppStore_AppStore","Boolean","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec0e05a3.chunk.js","sourcesContent":["import React from 'react';\n\nexport class ConnectionBulb extends React.Component\n{\n    render()\n    {\n        let {appStore} = this.props;\n        \n        return(\n            <div className={\"connectionBar \"+appStore.connection}>{appStore.connection}</div>\n        )\n    }\n}","import React from 'react';\n\nexport class TypingUsers extends React.Component\n{\n    render()\n    {\n        let {appStore} = this.props;\n        let users = Object.keys(appStore.typingUsers);\n        return(\n            <div className=\"typingUsers\">\n                <span>{users.length > 0 && users.join(',')+\" typing...\"}</span>\n            </div>\n        )\n    }\n}","import { Input } from 'antd';\nimport React from 'react';\nimport { TypingUsers } from './TypingUsers';\n\nexport class InputBox extends React.Component\n{\n    constructor()\n    {\n        super();\n        this.state={\n            inputValue:'',\n        }\n    }\n    keyDetect(evt)\n    {\n        let {api} = this.props;\n        this.setState({inputValue: evt.target.value});\n        api.updateTyping();\n    }\n    submitMessage()\n    {\n        let {api} = this.props;\n        api.sendMessage(this.state.inputValue);\n        this.setState({inputValue: ''});\n    }\n    render()\n    {\n        return(\n            <div className=\"inputBox\">\n                <TypingUsers appStore={this.props.appStore} />\n                <Input placeholder=\"Type here...\" \n                style={{color:'black'}}\n                value={this.state.inputValue} \n                onChange={this.keyDetect.bind(this)} \n                onPressEnter={this.submitMessage.bind(this)}/>\n            </div>\n        )\n    }\n}","import {  List, Skeleton, Tag } from 'antd';\nimport React from 'react';\n\nexport class MessageContainer extends React.Component\n{\n    constructor()\n    {\n        super();\n        this.mounted  = false;\n    }\n    componentDidMount()\n    {\n        this.mounted = true;\n    }\n    parseSkeleton()\n    {\n        let {appStore} = this.props;\n        return appStore.messages.length === 0 ? <Skeleton size=\"small\" active/> : this.renderMessageList();\n    }\n\n    componentDidUpdate(prevProp, prevState)\n    {\n        if(prevProp.appStore.scrollHeight !==  this.props.appStore.scrollHeight)\n            window.scrollTo(0,this.props.appStore.scrollHeight);\n    }\n\n    renderMessageList()\n    {\n        let {appStore} = this.props;\n\n        return  <List\n            size=\"small\"\n            split={false}\n            dataSource={appStore.messages}\n            className=\"messageContainer\"\n            renderItem={item => (\n                <List.Item style={ item.sender.trim() === '@self' ? { justifyContent:'flex-end'} : {}}>\n                    {\n                        item.sender.trim() === '@self' \n                        ?\n                        <Tag  color=\"geekblue\"><div style={{wordBreak: 'break-word' }}>{item.raw}</div></Tag>\n                        :\n                        <Tag color=\"blue\">{item.raw}</Tag>\n                    }\n                    \n                </List.Item>\n            ) }\n    />\n    }\n\n    render()\n    {\n        return this.parseSkeleton();\n    }\n}","import { Layout } from 'antd';\nimport React from 'react';\nimport { ConnectionBulb } from './ConnectionBulb.jsx';\nimport { InputBox } from './InputBox.jsx';\nimport { MessageContainer } from './MessageContainer.jsx';\n\nexport class AppContainer extends React.Component\n{\n    render()\n    {\n        const { Content } = Layout;\n        let {appStore, api} = this.props;\n        return(\n            <div className=\"padding10\">\n                <Content>\n                    <ConnectionBulb appStore={appStore}/>\n                    <MessageContainer appStore={appStore}/>\n                    <InputBox api={api} appStore={appStore} />\n                </Content>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { AppContainer } from './AppContainer.jsx';\nimport moment from 'moment';\n\nconst STATE = {\n    CONNECTED: 'connected',\n    DISCONNECTED: 'disconnected',\n    CONNECTING: 'connecting'\n}\n\nexport class AppStore extends React.Component {\n    \n    constructor() {\n        super();\n        this.username = '';\n        this.audio = new Audio(\"https://notificationsounds.com/soundfiles/8eefcfdf5990e441f0fb6f3fad709e21/file-sounds-1100-open-ended.ogg\");\n        this.queryParams = {};\n        window.onfocus = this.onFocus.bind(this)\n        this.state = {\n            messages: [],\n            connection: STATE.CONNECTING,\n            onlineUsers: '',\n            typingUsers: {},\n            scrollHeight:0,\n            messageCountWhenAway : 0\n        }\n        \n        this.readUrlQueryParams();\n        this.serverSocket = null;\n        this.initializeWebSocket();\n        this.startAsyncServices();\n        this.recovering = false;\n        \n    }\n\n    readUrlQueryParams()\n    {\n        var q = {};\n\t\tvar url = window.location.href;\n\t\tvar pattern = /\\?(.*)/\n\t\tvar patternResult = pattern.exec(url);\n\t\tif(patternResult != null)\n\t\t{\n\t\t    var queriesList = patternResult[1].split('&');\n\t\t    for(var i = 0 ; i < queriesList.length; i++)\n\t\t    {\n                var param = queriesList[i].split('=');\n\t    \t\tq[param[0]] = param[1];\n    \t\t}\n        }\n        this.username = q['n'] === undefined ? '' : q['n'];\n        this.queryParams = q;\n    }\n\n    onFocus()\n    {\n        document.title = 'FrizBee';\n        this.setState({messageCountWhenAway: 0});\n    }\n\n    updateMessageCountOnBlur()\n    {\n        if(!document.hasFocus())\n        {\n            let {messageCountWhenAway} = this.state;\n            this.audio.play();\n            this.setState({messageCountWhenAway: messageCountWhenAway+1});\n        }\n    }\n\n    initializeWebSocket() \n    {\n        if(this.serverSocket !== null && this.serverSocket.readyState === WebSocket.CONNECTING)\n        {\n            return;\n        }\n        if(this.state.connection === STATE.DISCONNECTED)\n        {\n            this.recovering = true;\n        }\n        this.serverSocket = new WebSocket(this.formWsUrl());\n        this.serverSocket.onopen = this.onWebsocketOpen.bind(this);\n        this.serverSocket.onclose = this.onWebsocketClose.bind(this);\n        this.serverSocket.onmessage = this.onWebsocketMessage.bind(this);\n        this.serverSocket.onerror = this.handleError.bind(this);\n    }\n\n    onWebsocketOpen() {\n        this.setState({ connection: STATE.CONNECTED });\n    }\n\n    onWebsocketMessage(evt) {\n        this.resolveMessage(evt.data);\n    }\n\n    handleError() {\n        this.onWebsocketClose();\n    }\n\n    onWebsocketClose() {\n        this.setState({ connection: STATE.DISCONNECTED });\n    }\n\n    resolveMessage(message) {\n        if (message.indexOf(\"@online\") === 0) {\n            this.updateOnlineUsers(message);\n            return;\n        }\n        else if (message.indexOf('@typing') === 0) {\n            this.updateTypingUsers(message);\n            return; \n        }\n        else {\n            this.updateNewMessage(message);\n        }\n    }\n\n    updateOnlineUsers(message) {\n        var onlineUsers = message.split(\"@online : \")[1];\n        this.setState({ onlineUsers: onlineUsers });\n    }\n\n    updateTypingUsers(message) {\n        let { typingUsers, userName } = this.state;\n        var user = message.split('@typing:')[1];\n        if (user !== userName) {\n            typingUsers[user] = this.getTime();\n        }\n        this.setState({ typingUsers: typingUsers });\n    }\n\n    parseIncommingMessage(message)\n    {\n        return {\n            sender: message.split(\":\")[0],\n            raw: message,\n            time: moment().format('LLL')\n        }\n    }\n    parseOutgoingMessage(message)\n    {\n        return{\n            sender: '@self',\n            raw: message,\n            time: moment().format('LLL')\n        }   \n    }\n\n    updateNewMessage(message) {\n        let { messages, typingUsers } = this.state;\n        messages.push(this.parseIncommingMessage(message));\n\n        const user = message.split(':')[0].trim();\n        delete typingUsers[user];\n\n        this.updateMessageCountOnBlur();\n        this.setState({ messages: messages, typingUsers: typingUsers , scrollHeight: messages.length * 130});        \n    }\n\n    sendMessage(message) {\n        if( message.trim() === '')\n        {\n            return;\n        }\n        \n        let { messages } = this.state;\n\n        if (this.username === '') {\n            this.setUsername(message);\n            messages.push(this.parseOutgoingMessage(message));\n            this.serverSocket.send(message);\n        }\n        else {\n            messages.push(this.parseOutgoingMessage(message));\n            this.serverSocket.send(message);\n        }\n        this.setState({ messages: messages , scrollHeight: messages.length * 130});\n    }\n\n    setUsername(name)\n    {\n        this.queryParams['n'] = name;\n        this.username = name;\n    }\n\n    updateTyping() {\n        if (this.username !== \"\") {\n            this.serverSocket.send('@typing:' + this.username);\n        }\n    }\n\n    formWsUrl() {\n        var queryParams = this.getQueryString();\n        return (window.location.hostname === 'localhost') ? \"ws://localhost:8080\" + queryParams : \"wss://events.newgen.co/im\" + queryParams;\n    }\n    \n    getQueryString() {\n        var str = '?';\n        const keys = Object.keys(this.queryParams);\n        for(var i in keys)\n        {\n            var key = keys[i];\n            str+= key+\"=\"+this.queryParams[key]+\"&\";\n        }\n        return str.substring(0, str.length - 1);\n    }\n\n    getTime() {\n        return Math.round((new Date()).getTime());\n    }\n\n    getApiHooks() {\n        return {\n            sendMessage: this.sendMessage.bind(this),\n            updateTyping: this.updateTyping.bind(this)\n        }\n    }\n\n    startAsyncServices() {\n        this.typingUserService = setInterval(this.refreshTypingUsers.bind(this), 300);\n        this.connectionMonitorService = setInterval(this.monitorConnection.bind(this), 5000);\n    }\n\n    refreshTypingUsers() {\n        let { typingUsers } = this.state;\n        let changed = false;\n        for (let user in typingUsers) {\n            if (this.getTime() - typingUsers[user] > 500) {\n                delete typingUsers[user];\n                changed = true;\n            }\n        }\n        if(changed)\n        {\n            this.setState({ typingUsers: typingUsers });\n        }\n    }\n\n    monitorConnection() {\n        let {connection} = this.state;\n        \n        if(connection === STATE.DISCONNECTED)\n        {\n            this.initializeWebSocket();\n        }\n\n        if(connection === STATE.CONNECTED)\n        {\n            this.serverSocket.send('@pong');\n        }\n    }\n\n    renderTitle()\n    {\n        let {messageCountWhenAway,messages} = this.state;\n        var msg = messageCountWhenAway > 0 ? messages[messages.length - 1 ].sender+' says..' : 'Frizbee'; \n        document.title =  msg;\n    }\n\n    render() {\n        this.renderTitle()\n        return (\n            <div>\n                <AppContainer appStore={this.state} api={this.getApiHooks()} />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport {AppStore} from './component/AppStore.jsx';\nimport 'antd/dist/antd.css';\n\nString.prototype.capitalize = function() {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AppStore/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}