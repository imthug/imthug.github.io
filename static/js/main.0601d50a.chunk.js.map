{"version":3,"sources":["component/ConnectionBulb.jsx","component/TypingUsers.jsx","component/InputBox.jsx","component/MessageContainer.jsx","component/AppContainer.jsx","component/AppStore.jsx","App.js","serviceWorker.js","index.js"],"names":["ConnectionBulb","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","appStore","props","react_default","a","createElement","className","connection","React","Component","TypingUsers","users","keys","typingUsers","length","icon","type","style","marginRight","join","InputBox","_this","call","state","inputValue","evt","api","setState","target","updateTyping","sendMessage","TypingUsers_TypingUsers","display","input","placeholder","color","onChange","keyDetect","bind","onPressEnter","submitMessage","autoFocus","es_button","marginLeft","onClick","MessageContainer","mounted","messages","skeleton","size","active","renderMessageList","prevProp","prevState","scrollHeight","window","scrollTo","list","split","dataSource","renderItem","item","Item","sender","trim","justifyContent","tag","wordBreak","raw","parseSkeleton","AppContainer","Content","Layout","_this$props","ConnectionBulb_ConnectionBulb","MessageContainer_MessageContainer","InputBox_InputBox","STATE","CONNECTED","DISCONNECTED","CONNECTING","AppStore","username","audio","Audio","queryParams","onfocus","onFocus","assertThisInitialized","onlineUsers","messageCountWhenAway","readUrlQueryParams","serverSocket","initializeWebSocket","startAsyncServices","recovering","q","url","location","href","patternResult","exec","queriesList","i","param","undefined","document","title","hasFocus","play","readyState","WebSocket","formWsUrl","onopen","onWebsocketOpen","onclose","onWebsocketClose","onmessage","onWebsocketMessage","onerror","handleError","resolveMessage","data","message","indexOf","updateNewMessage","updateTypingUsers","updateOnlineUsers","_this$state","userName","user","getTime","time","moment","format","_this$state2","push","parseIncommingMessage","updateMessageCountOnBlur","setUsername","parseOutgoingMessage","send","name","getQueryString","hostname","str","substring","Math","round","Date","typingUserService","setInterval","refreshTypingUsers","connectionMonitorService","monitorConnection","changed","_this$state3","msg","renderTitle","AppContainer_AppContainer","getApiHooks","String","prototype","capitalize","charAt","toUpperCase","slice","App","AppStore_AppStore","Boolean","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0601d50a.chunk.js","sourcesContent":["import React from 'react';\n\nexport class ConnectionBulb extends React.Component\n{\n    render()\n    {\n        let {appStore} = this.props;\n        \n        return(\n            <div className={\"connectionBar \"+appStore.connection}>{appStore.connection}</div>\n        )\n    }\n}","import { Icon } from 'antd';\nimport React from 'react';\nexport class TypingUsers extends React.Component\n{\n    render()\n    {\n        let {appStore} = this.props;\n        let users = Object.keys(appStore.typingUsers);\n        return(\n            <div className=\"typingUsers\">\n                {users.length > 0 && <Icon type=\"edit\" style={{marginRight:'5px'}}/>}\n                <span >{users.length > 0 && users.join(',')}</span>\n            </div>\n        )\n    }\n}","import { Input , Button} from 'antd';\nimport React from 'react';\nimport { TypingUsers } from './TypingUsers';\n\nexport class InputBox extends React.Component\n{\n    constructor()\n    {\n        super();\n        this.state={\n            inputValue:'',\n        }\n    }\n    keyDetect(evt)\n    {\n        let {api} = this.props;\n        this.setState({inputValue: evt.target.value});\n        api.updateTyping();\n    }\n    submitMessage()\n    {\n        let {api} = this.props;\n        api.sendMessage(this.state.inputValue);\n        this.setState({inputValue: ''});\n    }\n    render()\n    {\n        return(\n            <div className=\"inputBox\">\n                <TypingUsers appStore={this.props.appStore} />\n                <div style={{display: 'flex'}}>\n                    <Input placeholder=\"Type here...\" \n                    style={{color:'black'}}\n                    value={this.state.inputValue} \n                    onChange={this.keyDetect.bind(this)} \n                    onPressEnter={this.submitMessage.bind(this)}\n                    autoFocus=\"true\"\n                    />\n                    \n                    <Button \n                    type=\"primary\" \n                    icon=\"arrow-right\" \n                    style={{marginLeft:'10px'}}\n                    onClick={this.submitMessage.bind(this)}\n                     />\n                </div>\n            </div>\n        )\n    }\n}","import {  List, Skeleton, Tag } from 'antd';\nimport React from 'react';\n\nexport class MessageContainer extends React.Component\n{\n    constructor()\n    {\n        super();\n        this.mounted  = false;\n    }\n    componentDidMount()\n    {\n        this.mounted = true;\n    }\n    parseSkeleton()\n    {\n        let {appStore} = this.props;\n        return appStore.messages.length === 0 ? <Skeleton size=\"small\" active/> : this.renderMessageList();\n    }\n\n    componentDidUpdate(prevProp, prevState)\n    {\n        if(prevProp.appStore.scrollHeight !==  this.props.appStore.scrollHeight)\n            window.scrollTo(0,this.props.appStore.scrollHeight);\n    }\n\n    renderMessageList()\n    {\n        let {appStore} = this.props;\n\n        return  <List\n            size=\"small\"\n            split={false}\n            dataSource={appStore.messages}\n            className=\"messageContainer\"\n            renderItem={item => (\n                <List.Item style={ item.sender.trim() === '@self' ? { justifyContent:'flex-end'} : {}}>\n                    {\n                        item.sender.trim() === '@self' \n                        ?\n                        <Tag  color=\"geekblue\"><div style={{wordBreak: 'break-word' }}>{item.raw}</div></Tag>\n                        :\n                        <Tag color=\"blue\">{item.raw}</Tag>\n                    }\n                    \n                </List.Item>\n            ) }\n    />\n    }\n\n    render()\n    {\n        return this.parseSkeleton();\n    }\n}","import { Layout } from 'antd';\nimport React from 'react';\nimport { ConnectionBulb } from './ConnectionBulb.jsx';\nimport { InputBox } from './InputBox.jsx';\nimport { MessageContainer } from './MessageContainer.jsx';\n\nexport class AppContainer extends React.Component\n{\n    render()\n    {\n        const { Content } = Layout;\n        let {appStore, api} = this.props;\n        return(\n            <div className=\"padding10\">\n                <Content>\n                    <ConnectionBulb appStore={appStore}/>\n                    <MessageContainer appStore={appStore}/>\n                    <InputBox api={api} appStore={appStore} />\n                </Content>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { AppContainer } from './AppContainer.jsx';\nimport moment from 'moment';\n\nconst STATE = {\n    CONNECTED: 'connected',\n    DISCONNECTED: 'disconnected',\n    CONNECTING: 'connecting'\n}\n\nexport class AppStore extends React.Component {\n    \n    constructor() {\n        super();\n        this.username = '';\n        this.audio = new Audio(\"https://notificationsounds.com/soundfiles/8eefcfdf5990e441f0fb6f3fad709e21/file-sounds-1100-open-ended.ogg\");\n        this.queryParams = {};\n        window.onfocus = this.onFocus.bind(this)\n        this.state = {\n            messages: [],\n            connection: STATE.CONNECTING,\n            onlineUsers: '',\n            typingUsers: {},\n            scrollHeight:0,\n            messageCountWhenAway : 0\n        }\n        \n        this.readUrlQueryParams();\n        this.serverSocket = null;\n        this.initializeWebSocket();\n        this.startAsyncServices();\n        this.recovering = false;\n        \n    }\n\n    readUrlQueryParams()\n    {\n        var q = {};\n\t\tvar url = window.location.href;\n\t\tvar pattern = /\\?(.*)/\n\t\tvar patternResult = pattern.exec(url);\n\t\tif(patternResult != null)\n\t\t{\n\t\t    var queriesList = patternResult[1].split('&');\n\t\t    for(var i = 0 ; i < queriesList.length; i++)\n\t\t    {\n                var param = queriesList[i].split('=');\n\t    \t\tq[param[0]] = param[1];\n    \t\t}\n        }\n        this.username = q['n'] === undefined ? '' : q['n'];\n        this.queryParams = q;\n    }\n\n    onFocus()\n    {\n        document.title = 'FrizBee';\n        this.setState({messageCountWhenAway: 0});\n    }\n\n    updateMessageCountOnBlur()\n    {\n        if(!document.hasFocus())\n        {\n            let {messageCountWhenAway} = this.state;\n            this.audio.play();\n            this.setState({messageCountWhenAway: messageCountWhenAway+1});\n        }\n    }\n\n    initializeWebSocket() \n    {\n        if(this.serverSocket !== null && this.serverSocket.readyState === WebSocket.CONNECTING)\n        {\n            return;\n        }\n        if(this.state.connection === STATE.DISCONNECTED)\n        {\n            this.recovering = true;\n        }\n        this.serverSocket = new WebSocket(this.formWsUrl());\n        this.serverSocket.onopen = this.onWebsocketOpen.bind(this);\n        this.serverSocket.onclose = this.onWebsocketClose.bind(this);\n        this.serverSocket.onmessage = this.onWebsocketMessage.bind(this);\n        this.serverSocket.onerror = this.handleError.bind(this);\n    }\n\n    onWebsocketOpen() {\n        this.setState({ connection: STATE.CONNECTED });\n    }\n\n    onWebsocketMessage(evt) {\n        this.resolveMessage(evt.data);\n    }\n\n    handleError() {\n        this.onWebsocketClose();\n    }\n\n    onWebsocketClose() {\n        this.setState({ connection: STATE.DISCONNECTED });\n    }\n\n    resolveMessage(message) {\n        if (message.indexOf(\"@online\") === 0) {\n            this.updateOnlineUsers(message);\n            return;\n        }\n        else if (message.indexOf('@typing') === 0) {\n            this.updateTypingUsers(message);\n            return; \n        }\n        else {\n            this.updateNewMessage(message);\n        }\n    }\n\n    updateOnlineUsers(message) {\n        var onlineUsers = message.split(\"@online : \")[1];\n        this.setState({ onlineUsers: onlineUsers });\n    }\n\n    updateTypingUsers(message) {\n        let { typingUsers, userName } = this.state;\n        var user = message.split('@typing:')[1];\n        if (user !== userName) {\n            typingUsers[user] = this.getTime();\n        }\n        this.setState({ typingUsers: typingUsers });\n    }\n\n    parseIncommingMessage(message)\n    {\n        return {\n            sender: message.split(\":\")[0],\n            raw: message,\n            time: moment().format('LLL')\n        }\n    }\n    parseOutgoingMessage(message)\n    {\n        return{\n            sender: '@self',\n            raw: message,\n            time: moment().format('LLL')\n        }   \n    }\n\n    updateNewMessage(message) {\n        let { messages, typingUsers } = this.state;\n        messages.push(this.parseIncommingMessage(message));\n\n        const user = message.split(':')[0].trim();\n        delete typingUsers[user];\n\n        this.updateMessageCountOnBlur();\n        this.setState({ messages: messages, typingUsers: typingUsers , scrollHeight: messages.length * 130});        \n    }\n\n    sendMessage(message) {\n        if( message.trim() === '')\n        {\n            return;\n        }\n        \n        let { messages } = this.state;\n\n        if (this.username === '') {\n            this.setUsername(message);\n            messages.push(this.parseOutgoingMessage(message));\n            this.serverSocket.send(message);\n        }\n        else {\n            messages.push(this.parseOutgoingMessage(message));\n            this.serverSocket.send(message);\n        }\n        this.setState({ messages: messages , scrollHeight: messages.length * 130});\n    }\n\n    setUsername(name)\n    {\n        this.queryParams['n'] = name;\n        this.username = name;\n    }\n\n    updateTyping() {\n        if (this.username !== \"\") {\n            this.serverSocket.send('@typing:' + this.username);\n        }\n    }\n\n    formWsUrl() {\n        var queryParams = this.getQueryString();\n        return (window.location.hostname === 'localhost') ? \"ws://localhost:8080\" + queryParams : \"wss://events.newgen.co/im/\" + queryParams;\n    }\n    \n    getQueryString() {\n        var str = '?';\n        const keys = Object.keys(this.queryParams);\n        for(var i in keys)\n        {\n            var key = keys[i];\n            str+= key+\"=\"+this.queryParams[key]+\"&\";\n        }\n        return str.substring(0, str.length - 1);\n    }\n\n    getTime() {\n        return Math.round((new Date()).getTime());\n    }\n\n    getApiHooks() {\n        return {\n            sendMessage: this.sendMessage.bind(this),\n            updateTyping: this.updateTyping.bind(this)\n        }\n    }\n\n    startAsyncServices() {\n        this.typingUserService = setInterval(this.refreshTypingUsers.bind(this), 300);\n        this.connectionMonitorService = setInterval(this.monitorConnection.bind(this), 5000);\n    }\n\n    refreshTypingUsers() {\n        let { typingUsers } = this.state;\n        let changed = false;\n        for (let user in typingUsers) {\n            if (this.getTime() - typingUsers[user] > 500) {\n                delete typingUsers[user];\n                changed = true;\n            }\n        }\n        if(changed)\n        {\n            this.setState({ typingUsers: typingUsers });\n        }\n    }\n\n    monitorConnection() {\n        let {connection} = this.state;\n        \n        if(connection === STATE.DISCONNECTED)\n        {\n            this.initializeWebSocket();\n        }\n\n        if(connection === STATE.CONNECTED)\n        {\n            this.serverSocket.send('@pong');\n        }\n    }\n\n    renderTitle()\n    {\n        let {messageCountWhenAway,messages} = this.state;\n        var msg = messageCountWhenAway > 0 ? messages[messages.length - 1 ].sender+' says..' : 'Frizbee'; \n        document.title =  msg;\n    }\n\n    render() {\n        this.renderTitle()\n        return (\n            <div>\n                <AppContainer appStore={this.state} api={this.getApiHooks()} />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport {AppStore} from './component/AppStore.jsx';\nimport 'antd/dist/antd.css';\n\nString.prototype.capitalize = function() {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AppStore/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}